Execute (Initialize):
  RubyX

  ruby << RB
    def assert_equal a, b
      "AssertEqual #{a.to_v}, #{b.to_v}".vim!
    end
  RB

  unlet! g:hello g:goodbye g:howdy g:array g:dict g:count
  let g:hello   = 'world'
  let g:goodbye = 'world'
  let g:howdy   = 'world'
  let g:array   = ['hello', 'world', 1, 2, 3]
  let g:dict    = { 'hello': 'world' }
  let g:count   = 0

Execute ruby ([]):
  assert_equal 'world', VIM['g:hello']

Execute ruby (VIM::exists?):
  assert_equal true,  VIM.exists?('g:hello')
  assert_equal false, VIM.exists?('g:world')
  assert_equal true,  VIM['g:world'].nil?

Execute ruby (VIM.unlet):
  assert_equal true,  VIM.exists?('g:goodbye')
  assert_equal true,  VIM.exists?('g:howdy')
  VIM.unlet 'g:goodbye', 'g:howdy'
  assert_equal false, VIM.exists?('g:goodbye')
  assert_equal false, VIM.exists?('g:howdy')

Execute ruby (VIM[]=):
  [1000, 'goodbye', %w[a b c d], { 'a' => 1, 'b' => 'c' }].each do |data|
    VIM.unlet 'g:hello'
    VIM['g:hello'] = data
    assert_equal data, VIM['g:hello']
  end

Execute ruby (String#to_v):
  assert_equal '"Hello World"', 'Hello World'.to_v
  assert_equal '"\"Hello\" World"', '"Hello" World'.to_v

Execute ruby (Array#to_v):
  assert_equal '["Hello", "World"]', %w[Hello World].to_v

Execute ruby (Hash#to_v):
  assert_equal '{"Hello": "World"}', {'Hello' => 'World'}.to_v

Execute ruby (Range#to_v):
  assert_equal '["a", "b", "c", "d"]', ('a'..'d').to_v
  assert_equal '["a", "b", "c"]',      ('a'...'d').to_v
  assert_equal 'range(1, 4)',          (1..4).to_v
  assert_equal 'range(1, 3)',          (1...4).to_v

Execute ruby (Numeric#to_v):
  assert_equal '100', 100.to_v
  assert_equal '1.23', 1.23.to_v

Execute ruby (Boolean#to_v):
  assert_equal '1', true.to_v
  assert_equal '0', false.to_v

Execute (String#vim!):
  AssertEqual 0, g:count
  let g:count += 1
  AssertEqual 1, g:count
  ruby "let g:count += 1".vim!
  AssertEqual 2, g:count

Execute (String#vim?):
  ruby assert_equal 4, "g:count * 2".vim?

Execute ruby (VIM.interruptible (TODO: how? feedkeys doesn't work)):
  feeder = Thread.new {
    sleep 0.1
    VIM.call(:feedkeys, "\C-c")
  }

  begin
    VIM.interruptible do
      sleep 0.5

      # Should not reach here
      assert_equal false, true
    end
  rescue Interrupt
    assert_equal true, true
  end

  feeder.join

Given (some string):
  Hello World

Execute (VIM.normal):
  if !empty(maparg('u', 'v'))
    vunmap u
  endif

  ruby << RB
    VIM.normal 'Vu'
  RB

Expect (lowercase string):
  hello world

Execute (VIM.normal uses mappings):
  vmap u U
  ruby << RB
    VIM.normal 'Vu'
  RB

Expect (lowercase string):
  HELLO WORLD

Execute (VIM.normal! does not use mappings):
  vmap u U
  ruby << RB
    VIM.normal! 'Vu'
  RB

Expect (lowercase string):
  hello world

Given:

Execute (Cleanup):
  if !empty(maparg('u', 'v'))
    vunmap u
  endif

Execute (VIM.echo):
  redir => out
  ruby << RB
    VIM.echo 'hello'
  RB
  redir END
  Assert out =~# 'hello'

Execute (VIM.echo (hl)):
  redir => out
  ruby << RB
    VIM.echo 'hello', :Title
  RB
  redir END
  " TODO: correctly highlighted?
  Assert out =~# 'hello'

Execute (VIM.error):
  try
    ruby << RB
      VIM.error 'hello errors'
  RB
    Assert 0
  catch
    Assert 1
  endtry
  " TODO: messages output

